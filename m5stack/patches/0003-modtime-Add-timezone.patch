diff --git a/extmod/modtime.c b/extmod/modtime.c
index 805c2621c..66cd88fc1 100644
--- a/extmod/modtime.c
+++ b/extmod/modtime.c
@@ -29,6 +29,8 @@
 #include "py/runtime.h"
 #include "py/smallint.h"
 #include "extmod/modtime.h"
+#include "string.h"
+#include "uiflow_utility.h"
 
 #if MICROPY_PY_TIME
 
@@ -76,6 +78,42 @@ STATIC mp_obj_t time_localtime(size_t n_args, const mp_obj_t *args) {
 }
 MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_time_localtime_obj, 0, 1, time_localtime);
 
+// localtime([secs])
+// Convert a time expressed in seconds since the Epoch into an 8-tuple which
+// contains: (year, month, mday, hour, minute, second, weekday, yearday)
+// If secs is not provided or None, then the current time is used.
+// - year    is the full year, eg 2000
+// - month   is 1-12
+// - mday    is 1-31
+// - hour    is 0-23
+// - minute  is 0-59
+// - second  is 0-59
+// - weekday is 0-6 for Mon-Sun
+// - yearday is 1-366
+STATIC mp_obj_t time_gmtime(size_t n_args, const mp_obj_t *args) {
+    if (n_args == 0 || args[0] == mp_const_none) {
+        // Get current date and time.
+        return mp_time_gmtime_get();
+    } else {
+        // Convert given seconds to tuple.
+        mp_int_t seconds = mp_obj_get_int(args[0]);
+        timeutils_struct_time_t tm;
+        timeutils_seconds_since_epoch_to_struct_time(seconds, &tm);
+        mp_obj_t tuple[8] = {
+            tuple[0] = mp_obj_new_int(tm.tm_year),
+            tuple[1] = mp_obj_new_int(tm.tm_mon),
+            tuple[2] = mp_obj_new_int(tm.tm_mday),
+            tuple[3] = mp_obj_new_int(tm.tm_hour),
+            tuple[4] = mp_obj_new_int(tm.tm_min),
+            tuple[5] = mp_obj_new_int(tm.tm_sec),
+            tuple[6] = mp_obj_new_int(tm.tm_wday),
+            tuple[7] = mp_obj_new_int(tm.tm_yday),
+        };
+        return mp_obj_new_tuple(8, tuple);
+    }
+}
+MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_time_gmtime_obj, 0, 1, time_gmtime);
+
 // mktime()
 // This is the inverse function of localtime. Its argument is a full 8-tuple
 // which expresses a time as per localtime. It returns an integer which is
@@ -116,6 +154,26 @@ MP_DEFINE_CONST_FUN_OBJ_0(mp_time_time_ns_obj, time_time_ns);
 
 #endif // MICROPY_PY_TIME_TIME_TIME_NS
 
+STATIC mp_obj_t time_timezone(size_t n_args, const mp_obj_t *args) {
+    if (n_args == 0 || args[0] == mp_const_none) {
+        char *tz = getenv("TZ");
+        if (tz == NULL) {
+            return mp_const_none;
+        } else {
+            return mp_obj_new_str(tz, strlen(tz));
+        }
+    } else {
+        char tz[64];
+        snprintf(tz, sizeof(tz), "%s", mp_obj_str_get_str(args[0]));
+        setenv("TZ", tz, 1);
+        tzset();
+
+        nvs_write_str_helper(UIFLOW_NVS_NAMESPACE, "tz", tz);
+        return mp_const_none;
+    }
+}
+STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(time_timezone_obj, 0, 1, time_timezone);
+
 STATIC mp_obj_t time_sleep(mp_obj_t seconds_o) {
     #ifdef MICROPY_PY_TIME_CUSTOM_SLEEP
     mp_time_sleep(seconds_o);
@@ -200,7 +258,7 @@ STATIC const mp_rom_map_elem_t mp_module_time_globals_table[] = {
     { MP_ROM_QSTR(MP_QSTR___name__), MP_ROM_QSTR(MP_QSTR_time) },
 
     #if MICROPY_PY_TIME_GMTIME_LOCALTIME_MKTIME
-    { MP_ROM_QSTR(MP_QSTR_gmtime), MP_ROM_PTR(&mp_time_localtime_obj) },
+    { MP_ROM_QSTR(MP_QSTR_gmtime), MP_ROM_PTR(&mp_time_gmtime_obj) },
     { MP_ROM_QSTR(MP_QSTR_localtime), MP_ROM_PTR(&mp_time_localtime_obj) },
     { MP_ROM_QSTR(MP_QSTR_mktime), MP_ROM_PTR(&mp_time_mktime_obj) },
     #endif
@@ -210,6 +268,7 @@ STATIC const mp_rom_map_elem_t mp_module_time_globals_table[] = {
     { MP_ROM_QSTR(MP_QSTR_time_ns), MP_ROM_PTR(&mp_time_time_ns_obj) },
     #endif
 
+    { MP_ROM_QSTR(MP_QSTR_timezone), MP_ROM_PTR(&time_timezone_obj) },
     { MP_ROM_QSTR(MP_QSTR_sleep), MP_ROM_PTR(&mp_time_sleep_obj) },
     { MP_ROM_QSTR(MP_QSTR_sleep_ms), MP_ROM_PTR(&mp_time_sleep_ms_obj) },
     { MP_ROM_QSTR(MP_QSTR_sleep_us), MP_ROM_PTR(&mp_time_sleep_us_obj) },
diff --git a/ports/esp32/modtime.c b/ports/esp32/modtime.c
index 7a2b21508..e361a3d64 100644
--- a/ports/esp32/modtime.c
+++ b/ports/esp32/modtime.c
@@ -31,8 +31,8 @@
 #include "py/obj.h"
 #include "shared/timeutils/timeutils.h"
 
-// Return the localtime as an 8-tuple.
-STATIC mp_obj_t mp_time_localtime_get(void) {
+// Return the gmtime as an 8-tuple.
+STATIC mp_obj_t mp_time_gmtime_get(void) {
     struct timeval tv;
     gettimeofday(&tv, NULL);
     timeutils_struct_time_t tm;
@@ -50,6 +50,27 @@ STATIC mp_obj_t mp_time_localtime_get(void) {
     return mp_obj_new_tuple(8, tuple);
 }
 
+
+// Return the localtime as an 8-tuple.
+STATIC mp_obj_t mp_time_localtime_get(void) {
+    time_t rawtime;
+    struct tm *tm;
+    time( &rawtime );
+    tm = localtime( &rawtime );
+
+    mp_obj_t tuple[8] = {
+        tuple[0] = mp_obj_new_int(tm->tm_year + 1900) ,
+        tuple[1] = mp_obj_new_int(tm->tm_mon + 1),
+        tuple[2] = mp_obj_new_int(tm->tm_mday),
+        tuple[3] = mp_obj_new_int(tm->tm_hour),
+        tuple[4] = mp_obj_new_int(tm->tm_min),
+        tuple[5] = mp_obj_new_int(tm->tm_sec),
+        tuple[6] = mp_obj_new_int(tm->tm_wday),
+        tuple[7] = mp_obj_new_int(tm->tm_yday + 1),
+    };
+    return mp_obj_new_tuple(8, tuple);
+}
+
 // Return the number of seconds since the Epoch.
 STATIC mp_obj_t mp_time_time_get(void) {
     struct timeval tv;
diff --git a/ports/esp32/mpconfigport.h b/ports/esp32/mpconfigport.h
index 5dc4a9c75..31cd46f10 100644
--- a/ports/esp32/mpconfigport.h
+++ b/ports/esp32/mpconfigport.h
@@ -88,6 +88,7 @@
 #define MICROPY_GC_SPLIT_HEAP_AUTO          (1)
 
 // extended modules
+#define MICROPY_EPOCH_IS_1970                   (1)
 #ifndef MICROPY_PY_ESPNOW
 #define MICROPY_PY_ESPNOW                   (1)
 #endif
