From c7a9db1903a18a05db8046334f04842df3e84f83 Mon Sep 17 00:00:00 2001
From: Damien George <damien@micropython.org>
Date: Wed, 13 Nov 2024 13:54:16 +1100
Subject: [PATCH 1/5] extmod/vfs_blockdev: Provide and use func typedef for
 native read/write.

The readblocks/writeblocks functions, both native and Python versions, must
return 0 on success and negative errno integer on error.

These native typedefs help to document that.

Signed-off-by: Damien George <damien@micropython.org>
---
 extmod/vfs.h          | 5 +++++
 extmod/vfs_blockdev.c | 4 ++--
 2 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/extmod/vfs.h b/extmod/vfs.h
index f577d3e337c8..a82a1a9043a2 100644
--- a/extmod/vfs.h
+++ b/extmod/vfs.h
@@ -52,6 +52,11 @@
 #define MP_BLOCKDEV_IOCTL_BLOCK_SIZE    (5)
 #define MP_BLOCKDEV_IOCTL_BLOCK_ERASE   (6)
 
+// Function signatures used when MP_BLOCKDEV_FLAG_NATIVE is set.
+// Should return 0 for success, or a negative errno code for failure.
+typedef int (*mp_vfs_blockdev_native_readblocks)(uint8_t *, uint32_t, uint32_t);
+typedef int (*mp_vfs_blockdev_native_writeblocks)(const uint8_t *, uint32_t, uint32_t);
+
 // At the moment the VFS protocol just has import_stat, but could be extended to other methods
 typedef struct _mp_vfs_proto_t {
     mp_import_stat_t (*import_stat)(void *self, const char *path);
diff --git a/extmod/vfs_blockdev.c b/extmod/vfs_blockdev.c
index a7c14b76ee36..52a6d2565d84 100644
--- a/extmod/vfs_blockdev.c
+++ b/extmod/vfs_blockdev.c
@@ -69,7 +69,7 @@ static int mp_vfs_blockdev_call_rw(mp_obj_t *args, size_t block_num, size_t bloc
 
 int mp_vfs_blockdev_read(mp_vfs_blockdev_t *self, size_t block_num, size_t num_blocks, uint8_t *buf) {
     if (self->flags & MP_BLOCKDEV_FLAG_NATIVE) {
-        mp_uint_t (*f)(uint8_t *, uint32_t, uint32_t) = (void *)(uintptr_t)self->readblocks[2];
+        mp_vfs_blockdev_native_readblocks f = (void *)(uintptr_t)self->readblocks[2];
         return f(buf, block_num, num_blocks);
     } else {
         return mp_vfs_blockdev_call_rw(self->readblocks, block_num, 0, num_blocks * self->block_size, buf, 2);
@@ -87,7 +87,7 @@ int mp_vfs_blockdev_write(mp_vfs_blockdev_t *self, size_t block_num, size_t num_
     }
 
     if (self->flags & MP_BLOCKDEV_FLAG_NATIVE) {
-        mp_uint_t (*f)(const uint8_t *, uint32_t, uint32_t) = (void *)(uintptr_t)self->writeblocks[2];
+        mp_vfs_blockdev_native_writeblocks f = (void *)(uintptr_t)self->writeblocks[2];
         return f(buf, block_num, num_blocks);
     } else {
         return mp_vfs_blockdev_call_rw(self->writeblocks, block_num, 0, num_blocks * self->block_size, (void *)buf, 2);

From 21843c8c16317d5fa3400e1ba90d0708cb7a6526 Mon Sep 17 00:00:00 2001
From: Damien George <damien@micropython.org>
Date: Wed, 13 Nov 2024 13:56:11 +1100
Subject: [PATCH 2/5] cc3200: Change sflash_disk functions to return int.

These are only called by the vfs_blockdev implementation, so their return
value doesn't need to be a FATFS specific type.

Signed-off-by: Damien George <damien@micropython.org>
---
 .../cc3200/fatfs/src/drivers/sflash_diskio.c  | 55 ++++++++++---------
 .../cc3200/fatfs/src/drivers/sflash_diskio.h  | 10 ++--
 ports/cc3200/mods/pybflash.c                  | 10 ++--
 3 files changed, 39 insertions(+), 36 deletions(-)

diff --git a/ports/cc3200/fatfs/src/drivers/sflash_diskio.c b/ports/cc3200/fatfs/src/drivers/sflash_diskio.c
index 6a1fc406855d..936290a42954 100644
--- a/ports/cc3200/fatfs/src/drivers/sflash_diskio.c
+++ b/ports/cc3200/fatfs/src/drivers/sflash_diskio.c
@@ -3,6 +3,7 @@
 #include <stdio.h>
 
 #include "py/mpconfig.h"
+#include "py/mperrno.h"
 #include "py/obj.h"
 #include "lib/oofatfs/ff.h"
 #include "lib/oofatfs/diskio.h"
@@ -46,7 +47,7 @@ static bool sflash_access (_u32 mode, _i32 (* sl_FsFunction)(_i32 FileHdl, _u32
     return retval;
 }
 
-DRESULT sflash_disk_init (void) {
+int sflash_disk_init (void) {
     _i32 fileHandle;
     SlFsFileInfo_t FsFileInfo;
 
@@ -63,7 +64,7 @@ DRESULT sflash_disk_init (void) {
         sl_LockObjLock (&wlan_LockObj, SL_OS_WAIT_FOREVER);
         if (!sl_FsGetInfo(sflash_block_name, 0, &FsFileInfo)) {
             sl_LockObjUnlock (&wlan_LockObj);
-            return RES_OK;
+            return 0;
         }
         sl_LockObjUnlock (&wlan_LockObj);
 
@@ -78,37 +79,37 @@ DRESULT sflash_disk_init (void) {
                     sl_LockObjUnlock (&wlan_LockObj);
                     memset(sflash_block_cache, 0xFF, SFLASH_BLOCK_SIZE);
                     if (!sflash_access(FS_MODE_OPEN_WRITE, sl_FsWrite)) {
-                        return RES_ERROR;
+                        return -MP_EIO;
                     }
                 }
                 else {
                     // Unexpected failure while creating the file
                     sl_LockObjUnlock (&wlan_LockObj);
-                    return RES_ERROR;
+                    return -MP_EIO;
                 }
             }
             sl_LockObjUnlock (&wlan_LockObj);
         }
     }
-    return RES_OK;
+    return 0;
 }
 
-DRESULT sflash_disk_status(void) {
+int sflash_disk_status(void) {
     if (!sflash_init_done) {
-        return STA_NOINIT;
+        return -MP_ENODEV;
     }
-    return RES_OK;
+    return 0;
 }
 
-DRESULT sflash_disk_read(BYTE *buff, DWORD sector, UINT count) {
+int sflash_disk_read(BYTE *buff, DWORD sector, UINT count) {
     uint32_t secindex;
 
     if (!sflash_init_done) {
-        return STA_NOINIT;
+        return -MP_ENODEV;
     }
 
     if ((sector + count > SFLASH_SECTOR_COUNT) || (count == 0)) {
-        return RES_PARERR;
+        return -MP_EINVAL;
     }
 
     for (int i = 0; i < count; i++) {
@@ -116,33 +117,35 @@ DRESULT sflash_disk_read(BYTE *buff, DWORD sector, UINT count) {
         sflash_ublock = (sector + i) / SFLASH_SECTORS_PER_BLOCK;
         // See if it's time to read a new block
         if (sflash_prblock != sflash_ublock) {
-            if (sflash_disk_flush() != RES_OK) {
-                return RES_ERROR;
+            int ret = sflash_disk_flush();
+            if (ret != 0) {
+                return ret;
             }
             sflash_prblock = sflash_ublock;
             print_block_name (sflash_ublock);
             if (!sflash_access(FS_MODE_OPEN_READ, sl_FsRead)) {
-                return RES_ERROR;
+                return -MP_EIO;
             }
         }
         // Copy the requested sector from the block cache
         memcpy (buff, &sflash_block_cache[(secindex * SFLASH_SECTOR_SIZE)], SFLASH_SECTOR_SIZE);
         buff += SFLASH_SECTOR_SIZE;
     }
-    return RES_OK;
+
+    return 0;
 }
 
-DRESULT sflash_disk_write(const BYTE *buff, DWORD sector, UINT count) {
+int sflash_disk_write(const BYTE *buff, DWORD sector, UINT count) {
     uint32_t secindex;
     int32_t index = 0;
 
     if (!sflash_init_done) {
-        return STA_NOINIT;
+        return -MP_ENODEV;
     }
 
     if ((sector + count > SFLASH_SECTOR_COUNT) || (count == 0)) {
         sflash_disk_flush();
-        return RES_PARERR;
+        return -MP_EINVAL;
     }
 
     do {
@@ -150,14 +153,15 @@ DRESULT sflash_disk_write(const BYTE *buff, DWORD sector, UINT count) {
         sflash_ublock = (sector + index) / SFLASH_SECTORS_PER_BLOCK;
         // Check if it's a different block than last time
         if (sflash_prblock != sflash_ublock) {
-            if (sflash_disk_flush() != RES_OK) {
-                return RES_ERROR;
+            int ret = sflash_disk_flush();
+            if (ret != 0) {
+                return ret;
             }
             sflash_prblock = sflash_ublock;
             print_block_name (sflash_ublock);
             // Read the block into the cache
             if (!sflash_access(FS_MODE_OPEN_READ, sl_FsRead)) {
-                return RES_ERROR;
+                return -MP_EIO;
             }
         }
         // Copy the input sector to the block cache
@@ -166,17 +170,16 @@ DRESULT sflash_disk_write(const BYTE *buff, DWORD sector, UINT count) {
         sflash_cache_is_dirty = true;
     } while (++index < count);
 
-    return RES_OK;
+    return 0;
 }
 
-DRESULT sflash_disk_flush (void) {
+int sflash_disk_flush(void) {
     // Write back the cache if it's dirty
     if (sflash_cache_is_dirty) {
         if (!sflash_access(FS_MODE_OPEN_WRITE, sl_FsWrite)) {
-            return RES_ERROR;
+            return -MP_EIO;
         }
         sflash_cache_is_dirty = false;
     }
-    return RES_OK;
+    return 0;
 }
-
diff --git a/ports/cc3200/fatfs/src/drivers/sflash_diskio.h b/ports/cc3200/fatfs/src/drivers/sflash_diskio.h
index de3093439ca7..e53211823aef 100644
--- a/ports/cc3200/fatfs/src/drivers/sflash_diskio.h
+++ b/ports/cc3200/fatfs/src/drivers/sflash_diskio.h
@@ -7,10 +7,10 @@
 #define SFLASH_SECTOR_COUNT         ((SFLASH_BLOCK_SIZE * SFLASH_BLOCK_COUNT) / SFLASH_SECTOR_SIZE)
 #define SFLASH_SECTORS_PER_BLOCK    (SFLASH_BLOCK_SIZE / SFLASH_SECTOR_SIZE)
 
-DRESULT sflash_disk_init(void);
-DRESULT sflash_disk_status(void);
-DRESULT sflash_disk_read(BYTE *buff, DWORD sector, UINT count);
-DRESULT sflash_disk_write(const BYTE *buff, DWORD sector, UINT count);
-DRESULT sflash_disk_flush(void);
+int sflash_disk_init(void);
+int sflash_disk_status(void);
+int sflash_disk_read(BYTE *buff, DWORD sector, UINT count);
+int sflash_disk_write(const BYTE *buff, DWORD sector, UINT count);
+int sflash_disk_flush(void);
 
 #endif /* SFLASH_DISKIO_H_ */
diff --git a/ports/cc3200/mods/pybflash.c b/ports/cc3200/mods/pybflash.c
index 671b5137e275..e23486bbfb61 100644
--- a/ports/cc3200/mods/pybflash.c
+++ b/ports/cc3200/mods/pybflash.c
@@ -50,23 +50,23 @@ static mp_obj_t pyb_flash_make_new(const mp_obj_type_t *type, size_t n_args, siz
 static mp_obj_t pyb_flash_readblocks(mp_obj_t self, mp_obj_t block_num, mp_obj_t buf) {
     mp_buffer_info_t bufinfo;
     mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_WRITE);
-    DRESULT res = sflash_disk_read(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SFLASH_SECTOR_SIZE);
-    return MP_OBJ_NEW_SMALL_INT(res != RES_OK); // return of 0 means success
+    int res = sflash_disk_read(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SFLASH_SECTOR_SIZE);
+    return MP_OBJ_NEW_SMALL_INT(res); // return of 0 means success
 }
 static MP_DEFINE_CONST_FUN_OBJ_3(pyb_flash_readblocks_obj, pyb_flash_readblocks);
 
 static mp_obj_t pyb_flash_writeblocks(mp_obj_t self, mp_obj_t block_num, mp_obj_t buf) {
     mp_buffer_info_t bufinfo;
     mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_READ);
-    DRESULT res = sflash_disk_write(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SFLASH_SECTOR_SIZE);
-    return MP_OBJ_NEW_SMALL_INT(res != RES_OK); // return of 0 means success
+    int res = sflash_disk_write(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SFLASH_SECTOR_SIZE);
+    return MP_OBJ_NEW_SMALL_INT(res); // return of 0 means success
 }
 static MP_DEFINE_CONST_FUN_OBJ_3(pyb_flash_writeblocks_obj, pyb_flash_writeblocks);
 
 static mp_obj_t pyb_flash_ioctl(mp_obj_t self, mp_obj_t cmd_in, mp_obj_t arg_in) {
     mp_int_t cmd = mp_obj_get_int(cmd_in);
     switch (cmd) {
-        case MP_BLOCKDEV_IOCTL_INIT: return MP_OBJ_NEW_SMALL_INT(sflash_disk_init() != RES_OK);
+        case MP_BLOCKDEV_IOCTL_INIT: return MP_OBJ_NEW_SMALL_INT(sflash_disk_init());
         case MP_BLOCKDEV_IOCTL_DEINIT: sflash_disk_flush(); return MP_OBJ_NEW_SMALL_INT(0);
         case MP_BLOCKDEV_IOCTL_SYNC: sflash_disk_flush(); return MP_OBJ_NEW_SMALL_INT(0);
         case MP_BLOCKDEV_IOCTL_BLOCK_COUNT: return MP_OBJ_NEW_SMALL_INT(SFLASH_SECTOR_COUNT);

From 59ed89ad3e9c38b2e9a82b6aadd11930acbc68ae Mon Sep 17 00:00:00 2001
From: Damien George <damien@micropython.org>
Date: Wed, 13 Nov 2024 14:06:42 +1100
Subject: [PATCH 3/5] stm32/sdcard: Change type of sdcard_read/write_blocks to
 return int.

And make that 0 for success, negative errno integer for error.  And as a
consequence of this change the return value of the SDCard block device
Python bindings so they return an integer instead of a bool.

Signed-off-by: Damien George <damien@micropython.org>
---
 ports/stm32/sdcard.c | 42 ++++++++++++++++++++++--------------------
 ports/stm32/sdcard.h |  4 ++--
 2 files changed, 24 insertions(+), 22 deletions(-)

diff --git a/ports/stm32/sdcard.c b/ports/stm32/sdcard.c
index a7d062939965..f25ed7f965bb 100644
--- a/ports/stm32/sdcard.c
+++ b/ports/stm32/sdcard.c
@@ -27,6 +27,7 @@
 #include <string.h>
 
 #include "py/runtime.h"
+#include "py/mperrno.h"
 #include "py/mphal.h"
 #include "lib/oofatfs/ff.h"
 #include "extmod/vfs_fat.h"
@@ -498,10 +499,10 @@ static HAL_StatusTypeDef sdcard_wait_finished(uint32_t timeout) {
     return HAL_OK;
 }
 
-mp_uint_t sdcard_read_blocks(uint8_t *dest, uint32_t block_num, uint32_t num_blocks) {
+int sdcard_read_blocks(uint8_t *dest, uint32_t block_num, uint32_t num_blocks) {
     // check that SD card is initialised
     if (!(pyb_sdmmc_flags & PYB_SDMMC_FLAG_ACTIVE)) {
-        return HAL_ERROR;
+        return -MP_EIO;
     }
 
     HAL_StatusTypeDef err = HAL_OK;
@@ -591,35 +592,36 @@ mp_uint_t sdcard_read_blocks(uint8_t *dest, uint32_t block_num, uint32_t num_blo
         memcpy(dest, &saved_word, orig_dest - dest);
     }
 
-    return err;
+    return mp_hal_status_to_neg_errno(err);
 }
 
-mp_uint_t sdcard_write_blocks(const uint8_t *src, uint32_t block_num, uint32_t num_blocks) {
+int sdcard_write_blocks(const uint8_t *src, uint32_t block_num, uint32_t num_blocks) {
     // check that SD card is initialised
     if (!(pyb_sdmmc_flags & PYB_SDMMC_FLAG_ACTIVE)) {
-        return HAL_ERROR;
+        return -MP_EIO;
     }
 
-    HAL_StatusTypeDef err = HAL_OK;
-
     // check that src pointer is aligned on a 4-byte boundary
     if (((uint32_t)src & 3) != 0) {
         // pointer is not aligned, so allocate a temporary block to do the write
         uint8_t *src_aligned = m_new_maybe(uint8_t, SDCARD_BLOCK_SIZE);
         if (src_aligned == NULL) {
-            return HAL_ERROR;
+            return -MP_EIO;
         }
+        int ret = 0;
         for (size_t i = 0; i < num_blocks; ++i) {
             memcpy(src_aligned, src + i * SDCARD_BLOCK_SIZE, SDCARD_BLOCK_SIZE);
-            err = sdcard_write_blocks(src_aligned, block_num + i, 1);
-            if (err != HAL_OK) {
+            int ret = sdcard_write_blocks(src_aligned, block_num + i, 1);
+            if (ret != 0) {
                 break;
             }
         }
         m_del(uint8_t, src_aligned, SDCARD_BLOCK_SIZE);
-        return err;
+        return ret;
     }
 
+    HAL_StatusTypeDef err = HAL_OK;
+
     if (query_irq() == IRQ_STATE_ENABLED) {
         // we must disable USB irqs to prevent MSC contention with SD card
         uint32_t basepri = raise_irq_pri(IRQ_PRI_OTG_FS);
@@ -680,7 +682,7 @@ mp_uint_t sdcard_write_blocks(const uint8_t *src, uint32_t block_num, uint32_t n
         }
     }
 
-    return err;
+    return mp_hal_status_to_neg_errno(err);
 }
 
 /******************************************************************************/
@@ -783,11 +785,11 @@ static MP_DEFINE_CONST_FUN_OBJ_1(sd_info_obj, sd_info);
 // now obsolete, kept for backwards compatibility
 static mp_obj_t sd_read(mp_obj_t self, mp_obj_t block_num) {
     uint8_t *dest = m_new(uint8_t, SDCARD_BLOCK_SIZE);
-    mp_uint_t ret = sdcard_read_blocks(dest, mp_obj_get_int(block_num), 1);
+    int ret = sdcard_read_blocks(dest, mp_obj_get_int(block_num), 1);
 
     if (ret != 0) {
         m_del(uint8_t, dest, SDCARD_BLOCK_SIZE);
-        mp_raise_msg_varg(&mp_type_Exception, MP_ERROR_TEXT("sdcard_read_blocks failed [%u]"), ret);
+        mp_raise_msg_varg(&mp_type_Exception, MP_ERROR_TEXT("sdcard_read_blocks failed [%d]"), ret);
     }
 
     return mp_obj_new_bytearray_by_ref(SDCARD_BLOCK_SIZE, dest);
@@ -802,10 +804,10 @@ static mp_obj_t sd_write(mp_obj_t self, mp_obj_t block_num, mp_obj_t data) {
         mp_raise_msg_varg(&mp_type_ValueError, MP_ERROR_TEXT("writes must be a multiple of %d bytes"), SDCARD_BLOCK_SIZE);
     }
 
-    mp_uint_t ret = sdcard_write_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
+    int ret = sdcard_write_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
 
     if (ret != 0) {
-        mp_raise_msg_varg(&mp_type_Exception, MP_ERROR_TEXT("sdcard_write_blocks failed [%u]"), ret);
+        mp_raise_msg_varg(&mp_type_Exception, MP_ERROR_TEXT("sdcard_write_blocks failed [%d]"), ret);
     }
 
     return mp_const_none;
@@ -815,16 +817,16 @@ static MP_DEFINE_CONST_FUN_OBJ_3(sd_write_obj, sd_write);
 static mp_obj_t pyb_sdcard_readblocks(mp_obj_t self, mp_obj_t block_num, mp_obj_t buf) {
     mp_buffer_info_t bufinfo;
     mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_WRITE);
-    mp_uint_t ret = sdcard_read_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
-    return mp_obj_new_bool(ret == 0);
+    int ret = sdcard_read_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
+    return MP_OBJ_NEW_SMALL_INT(ret);
 }
 static MP_DEFINE_CONST_FUN_OBJ_3(pyb_sdcard_readblocks_obj, pyb_sdcard_readblocks);
 
 static mp_obj_t pyb_sdcard_writeblocks(mp_obj_t self, mp_obj_t block_num, mp_obj_t buf) {
     mp_buffer_info_t bufinfo;
     mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_READ);
-    mp_uint_t ret = sdcard_write_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
-    return mp_obj_new_bool(ret == 0);
+    int ret = sdcard_write_blocks(bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / SDCARD_BLOCK_SIZE);
+    return MP_OBJ_NEW_SMALL_INT(ret);
 }
 static MP_DEFINE_CONST_FUN_OBJ_3(pyb_sdcard_writeblocks_obj, pyb_sdcard_writeblocks);
 
diff --git a/ports/stm32/sdcard.h b/ports/stm32/sdcard.h
index a2e4e4517cf1..6dbf269707cc 100644
--- a/ports/stm32/sdcard.h
+++ b/ports/stm32/sdcard.h
@@ -38,8 +38,8 @@ void sdcard_power_off(void);
 uint64_t sdcard_get_capacity_in_bytes(void);
 
 // these return 0 on success, non-zero on error
-mp_uint_t sdcard_read_blocks(uint8_t *dest, uint32_t block_num, uint32_t num_blocks);
-mp_uint_t sdcard_write_blocks(const uint8_t *src, uint32_t block_num, uint32_t num_blocks);
+int sdcard_read_blocks(uint8_t *dest, uint32_t block_num, uint32_t num_blocks);
+int sdcard_write_blocks(const uint8_t *src, uint32_t block_num, uint32_t num_blocks);
 
 extern const struct _mp_obj_type_t pyb_sdcard_type;
 extern const struct _mp_obj_type_t pyb_mmcard_type;

From 6f02d3d101d71314e444b1d80324d90717c6629d Mon Sep 17 00:00:00 2001
From: Damien George <damien@micropython.org>
Date: Wed, 13 Nov 2024 14:07:57 +1100
Subject: [PATCH 4/5] stm32/storage: Change internal mp_uint_t to mp_int_t to
 match intent.

Signed-off-by: Damien George <damien@micropython.org>
---
 ports/stm32/storage.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/ports/stm32/storage.c b/ports/stm32/storage.c
index a6594fd4d98c..10dfec855d0c 100644
--- a/ports/stm32/storage.c
+++ b/ports/stm32/storage.c
@@ -327,7 +327,7 @@ static mp_obj_t pyb_flash_readblocks(size_t n_args, const mp_obj_t *args) {
     uint32_t block_num = mp_obj_get_int(args[1]);
     mp_buffer_info_t bufinfo;
     mp_get_buffer_raise(args[2], &bufinfo, MP_BUFFER_WRITE);
-    mp_uint_t ret = -MP_EIO;
+    mp_int_t ret = -MP_EIO;
     if (n_args == 3) {
         // Cast self->start to signed in case it's pyb_flash_obj with negative start
         block_num += FLASH_PART1_START_BLOCK + (int32_t)self->start / FLASH_BLOCK_SIZE;
@@ -354,7 +354,7 @@ static mp_obj_t pyb_flash_writeblocks(size_t n_args, const mp_obj_t *args) {
     uint32_t block_num = mp_obj_get_int(args[1]);
     mp_buffer_info_t bufinfo;
     mp_get_buffer_raise(args[2], &bufinfo, MP_BUFFER_READ);
-    mp_uint_t ret = -MP_EIO;
+    mp_int_t ret = -MP_EIO;
     if (n_args == 3) {
         // Cast self->start to signed in case it's pyb_flash_obj with negative start
         block_num += FLASH_PART1_START_BLOCK + (int32_t)self->start / FLASH_BLOCK_SIZE;

From bbc1f04b74490d7cfdbd3bb10b9ddfe358f21d0d Mon Sep 17 00:00:00 2001
From: Damien George <damien@micropython.org>
Date: Wed, 13 Nov 2024 14:10:08 +1100
Subject: [PATCH 5/5] esp32/machine_sdcard: Change SDCard read/write-blocks to
 return int.

This is what `vfs_blockdev.c` now expects, 0 for success and a negative
errno integer for failure.

Signed-off-by: Damien George <damien@micropython.org>
---
 ports/esp32/machine_sdcard.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/ports/esp32/machine_sdcard.c b/ports/esp32/machine_sdcard.c
index 92c6e64698c3..235d5216ca81 100644
--- a/ports/esp32/machine_sdcard.c
+++ b/ports/esp32/machine_sdcard.c
@@ -370,7 +370,8 @@ static mp_obj_t machine_sdcard_readblocks(mp_obj_t self_in, mp_obj_t block_num,
     mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_WRITE);
     err = sdmmc_read_sectors(&(self->card), bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / _SECTOR_SIZE(self));
 
-    return mp_obj_new_bool(err == ESP_OK);
+    int ret = err == ESP_OK ? 0 : -MP_EIO;
+    return MP_OBJ_NEW_SMALL_INT(ret);
 }
 static MP_DEFINE_CONST_FUN_OBJ_3(machine_sdcard_readblocks_obj, machine_sdcard_readblocks);
 
@@ -387,7 +388,8 @@ static mp_obj_t machine_sdcard_writeblocks(mp_obj_t self_in, mp_obj_t block_num,
     mp_get_buffer_raise(buf, &bufinfo, MP_BUFFER_READ);
     err = sdmmc_write_sectors(&(self->card), bufinfo.buf, mp_obj_get_int(block_num), bufinfo.len / _SECTOR_SIZE(self));
 
-    return mp_obj_new_bool(err == ESP_OK);
+    int ret = err == ESP_OK ? 0 : -MP_EIO;
+    return MP_OBJ_NEW_SMALL_INT(ret);
 }
 static MP_DEFINE_CONST_FUN_OBJ_3(machine_sdcard_writeblocks_obj, machine_sdcard_writeblocks);
 
