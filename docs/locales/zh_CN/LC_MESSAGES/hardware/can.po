# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016 - 2025 M5Stack Technology Co., Ltd
# This file is distributed under the same license as the UIFlow2 Programming
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: UIFlow2 Programming Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-18 15:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../en/hardware/can.rst:4 bf007143a9d84c6c81b6ef0bb336ef50
msgid "CAN"
msgstr ""

#: ../../en/hardware/can.rst:8 27681edb31d347bca18400c0fc3ff475
msgid ""
"CAN implements support for classic CAN (available on F4, F7 MCUs) and CAN"
" FD (H7 series) controllers. At the physical level CAN bus consists of 2 "
"lines: RX and TX.  Note that to connect the pyboard to a CAN bus you must"
" use a CAN transceiver to convert the CAN logic signals from the pyboard "
"to the correct voltage levels on the bus."
msgstr ""

#: ../../en/hardware/can.rst:13 8adfba911cfd49de88053090c60d79bb
msgid ""
"Example usage for classic CAN controller in Loopback (transceiver-less) "
"mode::"
msgstr ""

#: ../../en/hardware/can.rst:21 6c1ae436a166428a8472f14620789080
msgid "For detailed examples, please refer to: :ref:`unit.CANUnit <unit.CANUnit>`"
msgstr ""

#: ../../en/hardware/can.rst:25 e6d38ffd96164146bf46086de182efff
msgid "Constructors"
msgstr ""

#: ../../en/hardware/can.rst:29 94d75f2a91564806bc85d05665864b85
msgid ""
"Construct a CAN object on the given bus.  *bus* must be 0. With no "
"additional parameters, the CAN object is created but not initialised (it "
"has the settings from the last initialisation of the bus, if any).  If "
"extra arguments are given, the bus is initialised. See :meth:`CAN.init` "
"for parameters of initialisation."
msgstr ""

#: ../../en/hardware/can.rst:35 ../../en/hardware/can.rst:81
#: ../../en/hardware/can.rst:97 ../../en/hardware/can.rst:111
#: ../../en/hardware/can.rst:135 ../../en/hardware/can.rst:144
#: ../../en/hardware/can.rst:183 ../../en/hardware/can.rst:212
#: 297ef924db8f4b0eaaf61b3e5e5b836a 5ab95dd922db42e4adaa01e8b9aa0fcb
#: 5c0196ada7fc42fb9cbcd440d245441f 60742619dc6f4398bf1f1b37fb87d2e4
#: 71b734d30590454a8e665c7eead0d8fe 82b7ea485a8c43e09e56592fbf6eb6a8
#: bae22cb2084342be9037cd5e1c8c8e06 c770affa2b8f43ca847fac3428f84b2f
msgid "UIFLOW2:"
msgstr ""

#: ../../en/hardware/can.rst:37 a556321b20ad40b0b614801152dbf502
msgid "|init.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:1 c597ed8374894d3c952c692977896b5d
msgid "init.png"
msgstr ""

#: ../../en/hardware/can.rst:41 66fa2bbedc7a4347a8835f282a59fa4d
msgid "Methods"
msgstr ""

#: ../../en/hardware/can.rst:45 8a30991eaf1f438984ec375eef0c1139
msgid "Initialise the CAN bus with the given parameters:"
msgstr ""

#: ../../en/hardware/can.rst:47 286a3cce887f44c7a761bc82ba310efc
msgid "*mode* is one of:  NORMAL, NO_ACKNOWLEDGE, LISTEN_ONLY"
msgstr ""

#: ../../en/hardware/can.rst:48 cf394c6c75ce457b88d2f5771ec2f0bd
msgid "*tx* is the pin to use for transmitting data"
msgstr ""

#: ../../en/hardware/can.rst:49 87e723c624d2494bb2d6c94a90ebcace
msgid "*rx* is the pin to use for receiving data"
msgstr ""

#: ../../en/hardware/can.rst:50 c48eb3c28c654dce8e6b2cc7cec315b7
msgid ""
"*prescaler* is the value by which the CAN input clock is divided to "
"generate the nominal bit time quanta. The prescaler can be a value "
"between 1 and 1024 inclusive for classic CAN."
msgstr ""

#: ../../en/hardware/can.rst:53 c4a9bbaf79754c50af279a801e0087a4
msgid ""
"*sjw* is the resynchronisation jump width in units of time quanta for "
"nominal bits; it can be a value between 1 and 4 inclusive for classic "
"CAN."
msgstr ""

#: ../../en/hardware/can.rst:55 d266253dbf8d432197c5631a6723c115
msgid ""
"*bs1* defines the location of the sample point in units of the time "
"quanta for nominal bits; it can be a value between 1 and 16 inclusive for"
" classic CAN."
msgstr ""

#: ../../en/hardware/can.rst:57 72fa587c0ce94da3bee406a1ad78f0de
msgid ""
"*bs2* defines the location of the transmit point in units of the time "
"quanta for nominal bits; it can be a value between 1 and 8 inclusive for "
"classic CAN."
msgstr ""

#: ../../en/hardware/can.rst:59 79b21ae9a3784c859dcac228b656b7ca
msgid ""
"*triple_sampling* is Enables triple sampling when the TWAI controller "
"samples a bit"
msgstr ""

#: ../../en/hardware/can.rst:62 2a27169f6c394c7d8a535e2dd89e76b1
msgid ""
"The time quanta tq is the basic unit of time for the CAN bus.  tq is the "
"CAN prescaler value divided by APB_CLK clock source (typically 80 MHz);"
msgstr ""

#: ../../en/hardware/can.rst:65 2d57cc9ca3084a0baa702364af74b9f3
msgid ""
"A single bit is made up of the synchronisation segment, which is always 1"
" tq. Then follows bit segment 1, then bit segment 2.  The sample point is"
" after bit segment 1 finishes.  The transmit point is after bit segment 2"
" finishes. The baud rate will be 1/bittime, where the bittime is 1 + BS1 "
"+ BS2 multiplied by the time quanta tq."
msgstr ""

#: ../../en/hardware/can.rst:71 ef9593b76320404eb25f181e7493a92f
msgid ""
"For example, with APB_CLK=80MHz, prescaler=32, sjw=3, bs1=15, bs2=4, the "
"value of tq is 0.4 microseconds.  The bittime is 8 microseconds, and the "
"baudrate is 125kHz."
msgstr ""

#: ../../en/hardware/can.rst:75 bd284e5722aa4b0f94c108d17d9d8bdf
msgid "See esp32 technical reference manual for more details."
msgstr ""

#: ../../en/hardware/can.rst:79 632db63a4e1a4e8fbb9595837d4297c0
msgid "Turn off the CAN bus."
msgstr ""

#: ../../en/hardware/can.rst:83 379d78b2fb744e5db526c7a45c6f1517
msgid "|deinit.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:3 0d4093a6dfd145cdb8f8d15db29cdcbe
msgid "deinit.png"
msgstr ""

#: ../../en/hardware/can.rst:88 6dd16ef5cc5c4d1f9df4860b8280260c
msgid ""
"Force a software restart of the CAN controller without resetting its "
"configuration."
msgstr ""

#: ../../en/hardware/can.rst:91 3385795e4b8f407b87fe112312b34713
msgid ""
"If the controller enters the bus-off state then it will no longer "
"participate in bus activity.  If the controller is not configured to "
"automatically restart (see :meth:`~CAN.init()`) then this method can be "
"used to trigger a restart, and the controller will follow the CAN "
"protocol to leave the bus-off state and go into the error active state."
msgstr ""

#: ../../en/hardware/can.rst:99 54dec484c78e4486b17397dbb8db8140
msgid "|restart.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:5 082b319f4cb74f449d7a9b47623ef804
msgid "restart.png"
msgstr ""

#: ../../en/hardware/can.rst:103 0a192e64013b455a8e42da84a1e4e7fb
msgid "Return the state of the controller.  The return value can be one of:"
msgstr ""

#: ../../en/hardware/can.rst:105 beb0f08a943b403198d0a85c75eeda19
msgid "``CAN.STOPPED`` -- the controller is completely off and reset;"
msgstr ""

#: ../../en/hardware/can.rst:106 751c7afbf76f4792a42f616b44b5016f
msgid "``CAN.RUNNING`` -- The controller can transmit and receive messages;"
msgstr ""

#: ../../en/hardware/can.rst:107 39a10d334cb149a581e0d0aa5b7fb4c7
msgid ""
"``CAN.BUS_OFF`` -- the controller is on but not participating in bus "
"activity (TEC overflowed beyond 255);"
msgstr ""

#: ../../en/hardware/can.rst:109 501a958252ac463ca795710cacc191f3
msgid "``RECOVERING`` -- The controller is undergoing bus recovery."
msgstr ""

#: ../../en/hardware/can.rst:113 ffce2bb0357544e899ea21e2e2d85c50
msgid "|state.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:7 44d3bbe075a44cd18dd12f944eb76f5e
msgid "state.png"
msgstr ""

#: ../../en/hardware/can.rst:118 0c785b4eaf92480fb21f03a9a246672a
msgid ""
"Get information about the controller's error states and TX and RX "
"buffers. If *list* is provided then it should be a list object with at "
"least 8 entries, which will be filled in with the information.  Otherwise"
" a new list will be created and filled in.  In both cases the return "
"value of the method is the populated list."
msgstr ""

#: ../../en/hardware/can.rst:124 0191ddb873f741e2857475b8cf2ad1cd
msgid "The values in the list are:"
msgstr ""

#: ../../en/hardware/can.rst:126 37a4e9d210494b01ac328f9ff2b7ca5b
msgid "TEC value"
msgstr ""

#: ../../en/hardware/can.rst:127 d3fad10949434ec19642e23ace2895db
msgid "REC value"
msgstr ""

#: ../../en/hardware/can.rst:128 7325599351a74905805b71b0cf4fbbdb
msgid ""
"number of times the controller enterted the Error Warning state(ignored "
"for now, compatible with pyb.CAN)"
msgstr ""

#: ../../en/hardware/can.rst:129 227ffe888c334cc7a55d8e1aeb2cd3ca
msgid ""
"number of times the controller enterted the Error Passive state(ignored "
"for now, compatible with pyb.CAN)"
msgstr ""

#: ../../en/hardware/can.rst:130 469268cbfefa46ea84656ce7bf735867
msgid ""
"number of times the controller enterted the Bus Off state(ignored for "
"now, compatible with pyb.CAN)"
msgstr ""

#: ../../en/hardware/can.rst:131 d55354bb43ac40f3af585330a8b7bfb8
msgid "number of pending TX messages"
msgstr ""

#: ../../en/hardware/can.rst:132 46e91ee147a84ae8999b7c9aeb66575b
msgid "number of pending RX messages"
msgstr ""

#: ../../en/hardware/can.rst:133 59bce7a654f347ee94e4370daa0c2a83
msgid ""
"number of pending RX messages on fifo 1(ignored for now, compatible with "
"pyb.CAN)"
msgstr ""

#: ../../en/hardware/can.rst:137 d45c6a8daebc4343b4869580d1d38804
msgid "|info.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:9 66776b69a597431e930042ca8ad27a6a
msgid "info.png"
msgstr ""

#: ../../en/hardware/can.rst:142 2284c2d77f5b41cd9d5a6ab790a2a3cb
msgid "Return ``True`` if any message waiting on the FIFO, else ``False``."
msgstr ""

#: ../../en/hardware/can.rst:146 a1fe20d87ce64fa19d15c001ac2daa32
msgid "|any.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:11 86ae9e1746194b609616a19821019d3d
msgid "any.png"
msgstr ""

#: ../../en/hardware/can.rst:151 fe37a67d810e474fad4c00db935e0785
msgid "Receive data on the bus:"
msgstr ""

#: ../../en/hardware/can.rst:153 246e3f39a9ea4457a497521962e6e9ec
msgid "*fifo* is an integer, it can be any number and compatible with pyb.CAN"
msgstr ""

#: ../../en/hardware/can.rst:154 62eaf06634a3435c9ef78d834a300cdc
msgid "*list* is an optional list object to be used as the return value"
msgstr ""

#: ../../en/hardware/can.rst:155 85cd36ea98e9445295afabd65fb75a22
msgid "*timeout* is the timeout in milliseconds to wait for the receive."
msgstr ""

#: ../../en/hardware/can.rst:157 b9451f2fd00f42808a3e2ed274435a69
msgid "Return value: A tuple containing five values."
msgstr ""

#: ../../en/hardware/can.rst:159 acff02e795094555b12edc5528c261a3
msgid "The id of the message."
msgstr ""

#: ../../en/hardware/can.rst:160 f46485c0e29444828401bba90d9f35a5
msgid "A boolean that indicates if the message ID is standard or extended."
msgstr ""

#: ../../en/hardware/can.rst:161 9067d8e269414edd859b6febbee7cee4
msgid "A boolean that indicates if the message is an RTR message."
msgstr ""

#: ../../en/hardware/can.rst:162 781765c949424ef590bb63209805d4e4
msgid "The FMI (Filter Match Index) value."
msgstr ""

#: ../../en/hardware/can.rst:163 77423320519e446c81d45b6a746fc01e
msgid "An array containing the data."
msgstr ""

#: ../../en/hardware/can.rst:165 136baf89c1634f4ca03931aada23b67a
msgid ""
"If *list* is ``None`` then a new tuple will be allocated, as well as a "
"new bytes object to contain the data (as the fifth element in the tuple)."
msgstr ""

#: ../../en/hardware/can.rst:168 162e413e51824189acdc6edcbad14cec
msgid ""
"If *list* is not ``None`` then it should be a list object with a least "
"five elements.  The fifth element should be a memoryview object which is "
"created from either a bytearray or an array of type 'B' or 'b', and this "
"array must have enough room for at least 8 bytes.  The list object will "
"then be populated with the first four return values above, and the "
"memoryview object will be resized inplace to the size of the data and "
"filled in with that data. The same list and memoryview objects can be "
"reused in subsequent calls to this method, providing a way of receiving "
"data without using the heap. For example::"
msgstr ""

#: ../../en/hardware/can.rst:185 7549b0a9bfaf444b9736ca8064fd5c04
msgid "|recv1.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:13 4467ff291cc448e295672a56f40b9507
msgid "recv1.png"
msgstr ""

#: ../../en/hardware/can.rst:187 c4177bbe678e45a28b675935f89910a5
msgid "|recv2.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:15 11e0e62db17d4869a824cdb7e9107a54
msgid "recv2.png"
msgstr ""

#: ../../en/hardware/can.rst:192 8a138825e5444eba831b9d72699e3747
msgid "Send a message on the bus:"
msgstr ""

#: ../../en/hardware/can.rst:194 b335c81e37314a3190ed064247ca39dc
msgid "*data* is the data to send (an integer to send, or a buffer object)."
msgstr ""

#: ../../en/hardware/can.rst:195 341c4a2fb1af49058d957d05077aac87
msgid "*id* is the id of the message to be sent."
msgstr ""

#: ../../en/hardware/can.rst:196 cc4eda959aec42ab8729530ed4ffdfe9
msgid "*timeout* is the timeout in milliseconds to wait for the send."
msgstr ""

#: ../../en/hardware/can.rst:197 370e58e51a0e4ef18dc67dd0811606f9
msgid ""
"*rtr* is a boolean that specifies if the message shall be sent as a "
"remote transmission request.  If *rtr* is True then only the length of "
"*data* is used to fill in the DLC slot of the frame; the actual bytes in "
"*data* are unused."
msgstr ""

#: ../../en/hardware/can.rst:201 8bb4db20810840deb31257d25b90eb6f
msgid ""
"*extframe* if True the frame will have an extended identifier (29 bits), "
"otherwise a standard identifier (11 bits) is used."
msgstr ""

#: ../../en/hardware/can.rst:204 2a9a8b7bd66e4ba4bc46e4e61786e53a
msgid ""
"If timeout is 0 the message is placed in a buffer in one of three "
"hardware buffers and the method returns immediately. If all three buffers"
" are in use an exception is thrown. If timeout is not 0, the method waits"
" until the message is transmitted. If the message can't be transmitted "
"within the specified time an exception is thrown."
msgstr ""

#: ../../en/hardware/can.rst:210 3f38362a61ab47548404a59924459f9f
msgid "Return value: ``None``."
msgstr ""

#: ../../en/hardware/can.rst:214 a1e97dad94824f15b11855723d89a2ca
msgid "|send.png|"
msgstr ""

#: ../../en/refs/hardware.can.ref:17 069ee0a50ef74078af99d4bc68e12bdb
msgid "send.png"
msgstr ""

#: ../../en/hardware/can.rst:218 026225c94025468c868bc2c68bfb04e0
msgid "Constants"
msgstr ""

#: ../../en/hardware/can.rst:224 bca16eaecc9c433483563dd87f0328f3
msgid "The mode of the CAN bus used in :meth:`~CAN.init()`."
msgstr ""

#: ../../en/hardware/can.rst:232 509155617aae47d0ac366faf15628c58
msgid "Possible states of the CAN controller returned from :meth:`~CAN.state()`."
msgstr ""

#~ msgid "|init.svg|"
#~ msgstr ""

#~ msgid "init.svg"
#~ msgstr ""

#~ msgid "|deinit.svg|"
#~ msgstr ""

#~ msgid "deinit.svg"
#~ msgstr ""

#~ msgid "|restart.svg|"
#~ msgstr ""

#~ msgid "restart.svg"
#~ msgstr ""

#~ msgid "|state.svg|"
#~ msgstr ""

#~ msgid "state.svg"
#~ msgstr ""

#~ msgid "|info.svg|"
#~ msgstr ""

#~ msgid "info.svg"
#~ msgstr ""

#~ msgid "|any.svg|"
#~ msgstr ""

#~ msgid "any.svg"
#~ msgstr ""

#~ msgid "|recv1.svg|"
#~ msgstr ""

#~ msgid "recv1.svg"
#~ msgstr ""

#~ msgid "|recv2.svg|"
#~ msgstr ""

#~ msgid "recv2.svg"
#~ msgstr ""

#~ msgid "|send.svg|"
#~ msgstr ""

#~ msgid "send.svg"
#~ msgstr ""

