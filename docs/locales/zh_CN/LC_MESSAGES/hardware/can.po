# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016 - 2025 M5Stack Technology Co., Ltd
# This file is distributed under the same license as the UIFlow2 Programming
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: UIFlow2 Programming Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-16 15:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../en/hardware/can.rst:4 e59f53c2f741489cbecf23d943cff652
msgid "CAN"
msgstr ""

#: ../../en/hardware/can.rst:8 6687cbe59a6e43dd9a26c9b54c819f40
msgid ""
"CAN implements support for classic CAN (available on F4, F7 MCUs) and CAN"
" FD (H7 series) controllers. At the physical level CAN bus consists of 2 "
"lines: RX and TX.  Note that to connect the pyboard to a CAN bus you must"
" use a CAN transceiver to convert the CAN logic signals from the pyboard "
"to the correct voltage levels on the bus."
msgstr ""

#: ../../en/hardware/can.rst:13 65c441f4c4414e3090f494864d1fa87f
msgid ""
"Example usage for classic CAN controller in Loopback (transceiver-less) "
"mode::"
msgstr ""

#: ../../en/hardware/can.rst:21 d7fe8b4fdf1c4681a04e2b5e55800c2b
msgid "For detailed examples, please refer to: :ref:`unit.CANUnit <unit.CANUnit>`"
msgstr ""

#: ../../en/hardware/can.rst:25 5d395d14069d46a8aef22a3d1d8aaa32
msgid "Constructors"
msgstr ""

#: ../../en/hardware/can.rst:29 0ae7c738db2d4bdb903174febf18f168
msgid ""
"Construct a CAN object on the given bus.  *bus* must be 0. With no "
"additional parameters, the CAN object is created but not initialised (it "
"has the settings from the last initialisation of the bus, if any).  If "
"extra arguments are given, the bus is initialised. See :meth:`CAN.init` "
"for parameters of initialisation."
msgstr ""

#: ../../en/hardware/can.rst:35 ../../en/hardware/can.rst:81
#: ../../en/hardware/can.rst:97 ../../en/hardware/can.rst:111
#: ../../en/hardware/can.rst:135 ../../en/hardware/can.rst:144
#: ../../en/hardware/can.rst:183 ../../en/hardware/can.rst:212
#: 0ee13c11a8f648cf99f4457eda9b5f22 6982ecdcdd97432e88353665590766fb
#: 6f3e9426f6cc4bc984b14a6024c01498 773ba0eca22242268c20351890788d17
#: 80146832eca14131801fe3f8b307cff1 969082de81f14a98a39da9f2a92c2e48
#: d2d6c412f69c43558e7616047843ad42 d2f9ec58175f46e1916a8835cedbbaa0
msgid "UIFLOW2:"
msgstr ""

#: ../../en/hardware/can.rst:37 83d7649e40ac4510a618b864eb1db6d2
msgid "|init.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:1 08f88f5d4c654d4fbc11316a380a3a59
msgid "init.svg"
msgstr ""

#: ../../en/hardware/can.rst:41 4cc4958d749348f5a953083b40d26214
msgid "Methods"
msgstr ""

#: ../../en/hardware/can.rst:45 997ed42770ab49989ce451340bce7cae
msgid "Initialise the CAN bus with the given parameters:"
msgstr ""

#: ../../en/hardware/can.rst:47 8ed1e741de4f4a2ea5603c9e46a5d71a
msgid "*mode* is one of:  NORMAL, NO_ACKNOWLEDGE, LISTEN_ONLY"
msgstr ""

#: ../../en/hardware/can.rst:48 2bd1f9a4212944b8ad456ad606bec24a
msgid "*tx* is the pin to use for transmitting data"
msgstr ""

#: ../../en/hardware/can.rst:49 a55c3e13d5f94c86b8c8206fb8c07cb2
msgid "*rx* is the pin to use for receiving data"
msgstr ""

#: ../../en/hardware/can.rst:50 abe37c842342420498b1f3a262d14c02
msgid ""
"*prescaler* is the value by which the CAN input clock is divided to "
"generate the nominal bit time quanta. The prescaler can be a value "
"between 1 and 1024 inclusive for classic CAN."
msgstr ""

#: ../../en/hardware/can.rst:53 39835b60e7684298aa6392fe987d6f95
msgid ""
"*sjw* is the resynchronisation jump width in units of time quanta for "
"nominal bits; it can be a value between 1 and 4 inclusive for classic "
"CAN."
msgstr ""

#: ../../en/hardware/can.rst:55 7939c0149db9464e9cf7d021cce0435f
msgid ""
"*bs1* defines the location of the sample point in units of the time "
"quanta for nominal bits; it can be a value between 1 and 16 inclusive for"
" classic CAN."
msgstr ""

#: ../../en/hardware/can.rst:57 9bb203ab1c7a4edc8effc09c32c4a3ac
msgid ""
"*bs2* defines the location of the transmit point in units of the time "
"quanta for nominal bits; it can be a value between 1 and 8 inclusive for "
"classic CAN."
msgstr ""

#: ../../en/hardware/can.rst:59 9c102a8011034efe9b2ce6ac7c3be600
msgid ""
"*triple_sampling* is Enables triple sampling when the TWAI controller "
"samples a bit"
msgstr ""

#: ../../en/hardware/can.rst:62 035fabb97ac54e60a0470e5f8653023c
msgid ""
"The time quanta tq is the basic unit of time for the CAN bus.  tq is the "
"CAN prescaler value divided by APB_CLK clock source (typically 80 MHz);"
msgstr ""

#: ../../en/hardware/can.rst:65 d27f29077e8c40f596581518c7c5befc
msgid ""
"A single bit is made up of the synchronisation segment, which is always 1"
" tq. Then follows bit segment 1, then bit segment 2.  The sample point is"
" after bit segment 1 finishes.  The transmit point is after bit segment 2"
" finishes. The baud rate will be 1/bittime, where the bittime is 1 + BS1 "
"+ BS2 multiplied by the time quanta tq."
msgstr ""

#: ../../en/hardware/can.rst:71 b4982058e3634ee6a5b2ff96ff3135b5
msgid ""
"For example, with APB_CLK=80MHz, prescaler=32, sjw=3, bs1=15, bs2=4, the "
"value of tq is 0.4 microseconds.  The bittime is 8 microseconds, and the "
"baudrate is 125kHz."
msgstr ""

#: ../../en/hardware/can.rst:75 926933526d53474f94be5d6347bcf5ba
msgid "See esp32 technical reference manual for more details."
msgstr ""

#: ../../en/hardware/can.rst:79 61788bd560f34e6787176e769c18c5f9
msgid "Turn off the CAN bus."
msgstr ""

#: ../../en/hardware/can.rst:83 c6e17c7d3c694765810a0b36f487aa16
msgid "|deinit.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:3 892509bab86a4eedbeaee7c3386c2af6
msgid "deinit.svg"
msgstr ""

#: ../../en/hardware/can.rst:88 ad40c54cb0e04863bc056fdc9e9d97ed
msgid ""
"Force a software restart of the CAN controller without resetting its "
"configuration."
msgstr ""

#: ../../en/hardware/can.rst:91 9199e47eb4db4f068ae40a6eb2c8b576
msgid ""
"If the controller enters the bus-off state then it will no longer "
"participate in bus activity.  If the controller is not configured to "
"automatically restart (see :meth:`~CAN.init()`) then this method can be "
"used to trigger a restart, and the controller will follow the CAN "
"protocol to leave the bus-off state and go into the error active state."
msgstr ""

#: ../../en/hardware/can.rst:99 d89b8855bab9474ab7380f9bf423a46c
msgid "|restart.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:5 9b9503a656184a7b9edfc10f6db5ec4c
msgid "restart.svg"
msgstr ""

#: ../../en/hardware/can.rst:103 fd119898d27d4a1e9e9e11560d46f9cc
msgid "Return the state of the controller.  The return value can be one of:"
msgstr ""

#: ../../en/hardware/can.rst:105 6b08f0e07e8a4777a0479101ea70b379
msgid "``CAN.STOPPED`` -- the controller is completely off and reset;"
msgstr ""

#: ../../en/hardware/can.rst:106 745d875a5a0b4f44913a916068163490
msgid "``CAN.RUNNING`` -- The controller can transmit and receive messages;"
msgstr ""

#: ../../en/hardware/can.rst:107 47d254e43a4c4555876f4e506e6e3909
msgid ""
"``CAN.BUS_OFF`` -- the controller is on but not participating in bus "
"activity (TEC overflowed beyond 255);"
msgstr ""

#: ../../en/hardware/can.rst:109 8c347f2379024dbb896ffefd1795622f
msgid "``RECOVERING`` -- The controller is undergoing bus recovery."
msgstr ""

#: ../../en/hardware/can.rst:113 9526977166c143299abfdbf7ecfd36f0
msgid "|state.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:7 53e85617bc8b443b907287620328b1ed
msgid "state.svg"
msgstr ""

#: ../../en/hardware/can.rst:118 7993c15595354eedb39d208e51b47171
msgid ""
"Get information about the controller's error states and TX and RX "
"buffers. If *list* is provided then it should be a list object with at "
"least 8 entries, which will be filled in with the information.  Otherwise"
" a new list will be created and filled in.  In both cases the return "
"value of the method is the populated list."
msgstr ""

#: ../../en/hardware/can.rst:124 ee2c0f399a9743b895959b527f167c63
msgid "The values in the list are:"
msgstr ""

#: ../../en/hardware/can.rst:126 b52263b9d6ef489f9dc1d1c6ef1489ac
msgid "TEC value"
msgstr ""

#: ../../en/hardware/can.rst:127 f0489c4273544600a1a3bc462b0764c3
msgid "REC value"
msgstr ""

#: ../../en/hardware/can.rst:128 06f0166fd1b24b368be389b5f770ed3a
msgid ""
"number of times the controller enterted the Error Warning state(ignored "
"for now, compatible with pyb.CAN)"
msgstr ""

#: ../../en/hardware/can.rst:129 c81ec217a2414283b6438f55582f1f32
msgid ""
"number of times the controller enterted the Error Passive state(ignored "
"for now, compatible with pyb.CAN)"
msgstr ""

#: ../../en/hardware/can.rst:130 4c8bb292dde847059acd96d2b063da15
msgid ""
"number of times the controller enterted the Bus Off state(ignored for "
"now, compatible with pyb.CAN)"
msgstr ""

#: ../../en/hardware/can.rst:131 b1f6fb4a8b0647f89d71fd4b674a3f5c
msgid "number of pending TX messages"
msgstr ""

#: ../../en/hardware/can.rst:132 93ff88ce2b264c4a99e887d7b4842c77
msgid "number of pending RX messages"
msgstr ""

#: ../../en/hardware/can.rst:133 ce6319bf457f4b878cd86fae491bdf4e
msgid ""
"number of pending RX messages on fifo 1(ignored for now, compatible with "
"pyb.CAN)"
msgstr ""

#: ../../en/hardware/can.rst:137 bb3cdc5c451541408f6cfa9ed63993e1
msgid "|info.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:9 6938a4471199457a8f2fcd91fe4ed6d4
msgid "info.svg"
msgstr ""

#: ../../en/hardware/can.rst:142 640e5e03754f433d828b317b0d981745
msgid "Return ``True`` if any message waiting on the FIFO, else ``False``."
msgstr ""

#: ../../en/hardware/can.rst:146 64e0b6882d714cd594efb2cbcb09e2f8
msgid "|any.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:11 0b0b65a6447d46c683880a33003a99a9
msgid "any.svg"
msgstr ""

#: ../../en/hardware/can.rst:151 63d65ef178054887b25eefe5be07e4fa
msgid "Receive data on the bus:"
msgstr ""

#: ../../en/hardware/can.rst:153 37eb98fd4c93424d864ac493938f6c65
msgid "*fifo* is an integer, it can be any number and compatible with pyb.CAN"
msgstr ""

#: ../../en/hardware/can.rst:154 1a02cedab5624cf4afc26106d6fba7ae
msgid "*list* is an optional list object to be used as the return value"
msgstr ""

#: ../../en/hardware/can.rst:155 22acc374629e4ba6a331e4338101ea7e
msgid "*timeout* is the timeout in milliseconds to wait for the receive."
msgstr ""

#: ../../en/hardware/can.rst:157 b02f4a2e8f72412c861563f955b219e2
msgid "Return value: A tuple containing five values."
msgstr ""

#: ../../en/hardware/can.rst:159 21e8220046b04b2691de6296131dc9e3
msgid "The id of the message."
msgstr ""

#: ../../en/hardware/can.rst:160 dfd5ac9fb7fa42068304ec96c738f54b
msgid "A boolean that indicates if the message ID is standard or extended."
msgstr ""

#: ../../en/hardware/can.rst:161 d88fef32b1744c928d661fa408188144
msgid "A boolean that indicates if the message is an RTR message."
msgstr ""

#: ../../en/hardware/can.rst:162 e00c927829c144cfb299461fbb138e73
msgid "The FMI (Filter Match Index) value."
msgstr ""

#: ../../en/hardware/can.rst:163 98461f9ac7714aeab5ae8867acd15257
msgid "An array containing the data."
msgstr ""

#: ../../en/hardware/can.rst:165 2fd6bca9a26d44d28361eb61685f945c
msgid ""
"If *list* is ``None`` then a new tuple will be allocated, as well as a "
"new bytes object to contain the data (as the fifth element in the tuple)."
msgstr ""

#: ../../en/hardware/can.rst:168 bcb97a81dd264b88af312ac6f1be257b
msgid ""
"If *list* is not ``None`` then it should be a list object with a least "
"five elements.  The fifth element should be a memoryview object which is "
"created from either a bytearray or an array of type 'B' or 'b', and this "
"array must have enough room for at least 8 bytes.  The list object will "
"then be populated with the first four return values above, and the "
"memoryview object will be resized inplace to the size of the data and "
"filled in with that data. The same list and memoryview objects can be "
"reused in subsequent calls to this method, providing a way of receiving "
"data without using the heap. For example::"
msgstr ""

#: ../../en/hardware/can.rst:185 fe817d36cb314c7ea5c5de7fdb5cafa9
msgid "|recv1.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:13 1aff592bc62e41d4ac787d136569319f
msgid "recv1.svg"
msgstr ""

#: ../../en/hardware/can.rst:187 197bee05e9db4187b33921d72c25c214
msgid "|recv2.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:15 daf479a7a40c4e1cbf0f2d10aed9d8a0
msgid "recv2.svg"
msgstr ""

#: ../../en/hardware/can.rst:192 03a6a1752a7145c08d99870351d63331
msgid "Send a message on the bus:"
msgstr ""

#: ../../en/hardware/can.rst:194 c7b460e07b884249b37933b563a4f265
msgid "*data* is the data to send (an integer to send, or a buffer object)."
msgstr ""

#: ../../en/hardware/can.rst:195 abd50fe542d64df290c5a3fc96a22ce9
msgid "*id* is the id of the message to be sent."
msgstr ""

#: ../../en/hardware/can.rst:196 5773623f39a4457382227b698722cbe0
msgid "*timeout* is the timeout in milliseconds to wait for the send."
msgstr ""

#: ../../en/hardware/can.rst:197 283999c572aa4258a8c2bf2fa76b8b26
msgid ""
"*rtr* is a boolean that specifies if the message shall be sent as a "
"remote transmission request.  If *rtr* is True then only the length of "
"*data* is used to fill in the DLC slot of the frame; the actual bytes in "
"*data* are unused."
msgstr ""

#: ../../en/hardware/can.rst:201 6261427d28fb4cecba1be78c002678c7
msgid ""
"*extframe* if True the frame will have an extended identifier (29 bits), "
"otherwise a standard identifier (11 bits) is used."
msgstr ""

#: ../../en/hardware/can.rst:204 7be585f2b42843a0842c38645e0ff3b0
msgid ""
"If timeout is 0 the message is placed in a buffer in one of three "
"hardware buffers and the method returns immediately. If all three buffers"
" are in use an exception is thrown. If timeout is not 0, the method waits"
" until the message is transmitted. If the message can't be transmitted "
"within the specified time an exception is thrown."
msgstr ""

#: ../../en/hardware/can.rst:210 114036b9f9b04d2ea1b0b7a2dda5245c
msgid "Return value: ``None``."
msgstr ""

#: ../../en/hardware/can.rst:214 28684fc15ceb4eb5bf9f83db93d95b10
msgid "|send.svg|"
msgstr ""

#: ../../en/refs/hardware.can.ref:17 a78b3a4c44f840ec8722ba8572696ac0
msgid "send.svg"
msgstr ""

#: ../../en/hardware/can.rst:218 1a3fb34611944eddb097f65035f0acdf
msgid "Constants"
msgstr ""

#: ../../en/hardware/can.rst:224 3a59c432963a46f087a31ee6eec042fd
msgid "The mode of the CAN bus used in :meth:`~CAN.init()`."
msgstr ""

#: ../../en/hardware/can.rst:232 eeeeb93c1070415fa30acc849d49b1ce
msgid "Possible states of the CAN controller returned from :meth:`~CAN.state()`."
msgstr ""

